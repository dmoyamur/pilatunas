<div id="filter-background"></div>
<div id="title-users">
    <h1>PILATUNAS PAÑALERIA</h1>
</div>
<div id="title-gestion">
    <h1>Reportes de Compras</h1>
</div>

<form id="filterForm">
    <label for="startDate">Fecha Inicio:</label>
    <input type="date" id="startDate" required>
    <label for="endDate">Fecha Fin:</label>
    <input type="date" id="endDate" required>
    <button type="submit">Generar Reporte</button>

</form>


<table class="table-results">
    <thead>
        <tr>
            <th>Fecha</th>
            <th>Valor Total</th>
            
        </tr>
    </thead>
    <tbody id="reporteData">
    </tbody>
</table>

<div id="wrapper-comeback-menu">
    <button id="comeback-menu">Regresar al menú</button>
</div>

<script>
document.getElementById('comeback-menu').addEventListener('click', () => {
    window.location.href = '/menu';
});

// In your HTML file or JavaScript
document.getElementById('filterForm').addEventListener('submit', async (event) => {
    event.preventDefault();

    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;

    if (!startDate || !endDate) {
        alert('Por favor, selecciona ambas fechas.');
        return;
    }

    try {
        const formattedStartDate = new Date(startDate).toISOString().split('T')[0];
        const formattedEndDate = new Date(endDate).toISOString().split('T')[0];

        const url = `/reporte-compras/${encodeURIComponent(formattedStartDate)}/${encodeURIComponent(formattedEndDate)}`;

        console.log('Fetching URL:', url); // Add logging

        const response = await fetch(url);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('Server error response:', errorText);
            throw new Error('Error al obtener los datos del servidor');
        }

        const movimientos = await response.json();
        updateTableCompras(movimientos);
    } catch (error) {
        console.error('Error:', error);
        alert('Hubo un problema al generar el reporte de compras');
    }
});

function updateTableCompras(movimientos) {
    const tbody = document.getElementById('reporteData');
    tbody.innerHTML = '';

    if (movimientos && movimientos.length > 0) {
        let totalGeneral = 0;

        movimientos.forEach(movimiento => {
            const row = document.createElement('tr');
            const cantidadTotal = movimiento.totalCompra || 0;
            totalGeneral += cantidadTotal;

            const fecha = parseFecha(movimiento.fecha);

            row.innerHTML = `
                <td>${fecha}</td>
                <td>$${cantidadTotal.toFixed(2)}</td>
            `;
            tbody.appendChild(row);
        });

        const totalRow = document.createElement('tr');
        totalRow.innerHTML = `
            <td><strong>TOTAL</strong></td>
            <td><strong>$${totalGeneral.toFixed(2)}</strong></td>
        `;
        tbody.appendChild(totalRow);
    } else {
        tbody.innerHTML = '<tr><td colspan="2">No se encontraron compras para este rango de fechas.</td></tr>';
    }
}
function parseFecha(fecha) {
    if (!fecha) {
        return 'Fecha no disponible';
    }

    try {
        const parsedDate = new Date(fecha);

        if (isNaN(parsedDate.getTime())) {
            return 'Fecha inválida';
        }

        return parsedDate.toLocaleDateString('es-EC', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    } catch (error) {
        console.error('Error parsing date:', error);
        return 'Fecha no disponible';
    }
}


function calcularValorTotal(movimiento) {
    return movimiento.totalVenta || 0;
}

function parseFecha(fecha) {
    if (!fecha) {
        return 'Fecha no disponible';
    }

    try {
        const parsedDate = new Date(fecha);
        
        if (isNaN(parsedDate.getTime())) {
            return 'Fecha inválida';
        }

        return parsedDate.toLocaleDateString('es-EC', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
    } catch (error) {
        console.error('Error parsing date:', error);
        return 'Fecha no disponible';
    }
}
</script>